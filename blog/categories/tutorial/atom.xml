<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Phil Cooper-King]]></title>
  <link href="http://PhilCK.github.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://PhilCK.github.com/"/>
  <updated>2012-10-10T16:26:54+01:00</updated>
  <id>http://PhilCK.github.com/</id>
  <author>
    <name><![CDATA[Phil CK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Isometric Perspective]]></title>
    <link href="http://PhilCK.github.com/blog/2011/05/05/isometric-perspective/"/>
    <updated>2011-05-05T19:59:00+01:00</updated>
    <id>http://PhilCK.github.com/blog/2011/05/05/isometric-perspective</id>
    <content type="html"><![CDATA[<p>This is a quick overview on how to achieve an isometric perspective.
The example code is written in Ruby, it also assumes you know how to draw an image onto the screen, as this tutorial is just an overview. It should be quite easy to re-write this in the language of your choice, Ruby is easy to read.</p>

<h3>Square Tiles</h3>

<p>I’ll use this map data for this article.
A 3 x 3 array, containing the symbol :grass.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@level_data</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>   <span class="o">[</span><span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>   <span class="o">[</span><span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>   <span class="o">[</span><span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="p">,</span> <span class="ss">:grass</span><span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Assuming you have a square tile how would we draw a plane old top down tile view like this. We loop through the array multiplying the coordinates of the array with the height and width of the tile.</p>

<p><img src="/post_images/IsoTutorial/sq_tiles.png" title="'How tiled squares might look.'" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tile</span><span class="o">::</span><span class="no">WIDTH</span>  <span class="o">=</span> <span class="mi">64</span>
</span><span class='line'><span class="no">Tile</span><span class="o">::</span><span class="no">HEIGHT</span> <span class="o">=</span> <span class="mi">64</span>
</span><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>   <span class="vi">@level_data</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @level_data[y].length.times do |x|</span>
</span><span class='line'><span class="sr">     # multiply the array index with HEIGHT and WIDTH</span>
</span><span class='line'><span class="sr">     coord_x = x * Tile::WIDTH</span>
</span><span class='line'><span class="sr">     coord_y = y * Tile::HEIGHT</span>
</span><span class='line'><span class="sr">     Tile::draw(coord_x, coord_y)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is in fact 80% of the way there.</p>

<h3>Switching To Isometric Tiles</h3>

<p>Next we are going to switch to isometric tiles. First you need to create an isometric tile in some sort of editor (Photoshop etc.). Isometric tiles are a diamond shape thats width is twice the height.</p>

<p><img src="/post_images/IsoTutorial/iso_tile.png" title="'How an Iso tile might look.'" ></p>

<p>Also we are going to redeﬁne Tile::HEIGHT then try again.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tile</span><span class="o">::</span><span class="no">WIDTH</span>  <span class="o">=</span> <span class="mi">64</span>
</span><span class='line'><span class="no">Tile</span><span class="o">::</span><span class="no">HEIGHT</span> <span class="o">=</span> <span class="no">Tile</span><span class="o">::</span><span class="no">WIDTH</span> <span class="o">/</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then using the code from the ﬁrst part (and assuming you now have a tile that is 64 wide and 32 high.) we should get an image like this. Ah, somethings not quite right, but its almost there.</p>

<p><img src="/post_images/IsoTutorial/iso_tiles.png" title="'How an Iso tiles might look.'" ></p>

<h3>Line Up The Horizontal Tiles Correctly</h3>

<p>Here we are left with a choice on how to arrange our data, I’ll show you both and leave it to you to decide which is more suitable for your game. For both methods we need to offset the rows so it will ﬁt. We need to shift it by half with width, I’ve added a new constant for clarity.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tile</span><span class="o">::</span><span class="no">HALF_WIDTH</span> <span class="o">=</span> <span class="no">Tile</span><span class="o">::</span><span class="no">WIDTH</span> <span class="o">/</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First you can shift only the odd (or even) rows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>   <span class="vi">@level_data</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @level_data[y].length.times do |x|</span>
</span><span class='line'><span class="sr">     coord_x = x * Tile::WIDTH</span>
</span><span class='line'><span class="sr">     coord_y = y * Tile::HEIGHT</span>
</span><span class='line'><span class="sr">     # check to see if y if odd or even, then adds the offset.</span>
</span><span class='line'><span class="sr">     if (y % 2) &amp;gt; 0 &amp;amp;&amp;amp; y != 0 </span>
</span><span class='line'><span class="sr">        coord_x += Tile::HALF_WIDTH</span>
</span><span class='line'><span class="sr">     end</span>
</span><span class='line'><span class="sr">     Tile::draw(coord_x, coord_y)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This should give you something like this.The alternative is we could offset every row.</p>

<p><img src="/post_images/IsoTutorial/iso_tiles_align_a.png" title="'One alignment option.'" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>   <span class="vi">@level_data</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @level_data[y].length.times do |x|</span>
</span><span class='line'><span class="sr">     coord_x = x * Tile::WIDTH</span>
</span><span class='line'><span class="sr">     coord_y = y * Tile::HEIGHT</span>
</span><span class='line'><span class="sr">     # offset every row</span>
</span><span class='line'><span class="sr">     coord_x += (Tile::HALF_WIDTH * y)</span>
</span><span class='line'><span class="sr">     Tile::draw(coord_x, coord_y)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which should result in.</p>

<p><img src="/post_images/IsoTutorial/iso_tiles_align_b.png" title="'Another alignment option.'" ></p>

<p>OK, so things should start to be looking right, but we have one more hurdle left the height offset.</p>

<h3>Lining Up The Vertical Tiles Correctly</h3>

<p>Lining up the tiles vertically is very easy we just need to change one line of the code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>   <span class="vi">@level_data</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @level_data[y].length.times do |x|</span>
</span><span class='line'><span class="sr">     coord_x = x * Tile::WIDTH</span>
</span><span class='line'><span class="sr">     coord_y = y * Tile::HALF_HEIGHT # multiply by HALF_HEIGHT instead of HEIGHT</span>
</span><span class='line'><span class="sr">     # offset every row</span>
</span><span class='line'><span class="sr">     coord_x += (Tile::HALF_WIDTH * y)</span>
</span><span class='line'><span class="sr">     Tile::draw(coord_x, coord_y)        </span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The result should be a nice isometric view.</p>

<p><img src="/post_images/IsoTutorial/iso_tiles_align_c.png" title="'Well Done.'" ></p>

<p>Done! Well almost.</p>

<h3>Heightmaps And Z-Order</h3>

<p>This is really an optional extra, it all depends on what you are trying to achieve. We need to redesign our tile first. It needs to be 6 sided like a hexagon, but it doesn't have to be exact.</p>

<p><img src="/post_images/IsoTutorial/iso_height_tile.png" title="'Iso cube.'" ></p>

<p>The depth of this is the same as the height, but you can make it as high as you need. Most of the draw code stays the same, we just need to take in a height value. For the purpose of this tutorial the height is calculated from the array index however in reality you would have a height map which the values of each tile could be loaded. There is also another thing we need to do since we are now drawing tiles on top of each other. We need draw the tiles from back to front so we don’t get any weird drawing effects. In this example we just use the array's Y position, this ensures that the tiles are drawn in the correct order.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>   <span class="vi">@level_data</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @level_data[y].length.times do |x|</span>
</span><span class='line'><span class="sr">     coord_x = x * Tile::WIDTH</span>
</span><span class='line'><span class="sr">     coord_y = y * Tile::HALF_HEIGHT</span>
</span><span class='line'><span class="sr">     coord_x += (Tile::HALF_WIDTH * y) # height based on x array index</span>
</span><span class='line'><span class="sr">     coord_y += x * 5</span>
</span><span class='line'><span class="sr">     Tile::draw(coord_x, coord_y, y) # &amp;lt;-- Added Z-Order to the draw function.</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Woot we have a set of weird steps. Enjoy…</p>

<p><img src="/post_images/IsoTutorial/iso_steps.png" title="'Iso steps.'" ></p>

<p>An example of different tiles.</p>

<p><img src="/post_images/IsoTutorial/iso_height_example.png" title="'Iso map.'" ></p>

<p>Full Ruby <a href="http://pastie.org/1635807" title="Full Code">Code</a> (Uses libgosu)</p>
]]></content>
  </entry>
  
</feed>
