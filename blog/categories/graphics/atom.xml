<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graphics | Phil Cooper-King]]></title>
  <link href="http://PhilCK.github.com/blog/categories/graphics/atom.xml" rel="self"/>
  <link href="http://PhilCK.github.com/"/>
  <updated>2012-10-17T11:38:53+01:00</updated>
  <id>http://PhilCK.github.com/</id>
  <author>
    <name><![CDATA[Phil CK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Honors Project]]></title>
    <link href="http://PhilCK.github.com/blog/2012/10/08/honors-project/"/>
    <updated>2012-10-08T18:45:00+01:00</updated>
    <id>http://PhilCK.github.com/blog/2012/10/08/honors-project</id>
    <content type="html"><![CDATA[<p>The topic for my honors project was a hard decision. The two main contenders were <a href="http://en.wikipedia.org/wiki/Deferred_shading#Deferred_lighting" title="Deferred Lighting">deferred lighting</a> and <a href="http://en.wikipedia.org/wiki/MegaTexture#Virtual_texturing" title="Virtual Texturing">virtual texturing</a>, with a visual programming language and VR headsets taking the runners up topics. In the end I chose virtual texturing. Something that Rage used to generate some very petty scenes, and some very interesting texture popping.</p>

<p><img src="/post_images/Honors/rage.jpg" title="'Rage'" ></p>

<p>The basic idea is that you create a massive texture file, in Rages case I believe they could be up to 128,000 x 128,000 pixels then just stream off the hard-drive (or disc) the information you need based on your position in the world.</p>

<p><blockquote><p>Regardless of how much detail its texture might contain, you cannot display more texels than the screen has pixels.</p><footer><strong>Ben Garney</strong> <cite>Game Programming Gems 7 - Clipmapping</cite></footer></blockquote></p>

<p>The motivation is an old one, textures in the distance need not have as much detail in them as textures closer to the camera. But the two texture files might take up the same space on the GPU. So if we can stream in the amount of information when we need it we can save our-selfs a lot of memory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playstation 2 FishEye]]></title>
    <link href="http://PhilCK.github.com/blog/2012/02/02/ps2-fisheye/"/>
    <updated>2012-02-02T19:55:00+00:00</updated>
    <id>http://PhilCK.github.com/blog/2012/02/02/ps2-fisheye</id>
    <content type="html"><![CDATA[<p>We were tasked with creating a 'visual effect' for the PS2 using its VCL code. This was quite interesting, I thought I'd found all the ways to crash a PS2, then another one comes along. Get your VCL code wrong, and boom!</p>

<p>I ended up thinking of it as a vertex shader, and created a fish eye type effect. Its not a true fish eye effect because I am actually moving the vertices which means you can peek around corners so to speak.</p>

<p>[pic in-coming]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture Importers]]></title>
    <link href="http://PhilCK.github.com/blog/2011/05/02/texture-importer/"/>
    <updated>2011-05-02T19:58:00+01:00</updated>
    <id>http://PhilCK.github.com/blog/2011/05/02/texture-importer</id>
    <content type="html"><![CDATA[<p>I wrote these importers (Targa and Bitmap) for OpenGL (Well any API I guess), I originally wrote these for the PS2 because the importer we were given was such a pain to use.</p>

<p><img src="/post_images/SideProjects/texture_loader.png" title="'textures'" ></p>

<p>The Targa was interesting as it has quite a few features in the file spec, the fact you can orientate the image when storing to disc any way you want I found a little unnecessary. Code can be gotten here if you are interested, they are pretty much complete, although they donâ€™t support RLE compression.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL Tardis]]></title>
    <link href="http://PhilCK.github.com/blog/2011/04/25/opengl-tardis/"/>
    <updated>2011-04-25T19:59:00+01:00</updated>
    <id>http://PhilCK.github.com/blog/2011/04/25/opengl-tardis</id>
    <content type="html"><![CDATA[<p>This was my second year coursework for Graphics Programming. I was very disappointed in the module as a whole - I struggle to see the benefit of learning the fixed function pipeline any more, along with every feature of OpenGL that no longer exists. The module felt like it was put together by somebody who didn't care, and the claim that we would learn the theory of graphic programming turned out to be marketing speak, for learning next to nothing useful.</p>

<iframe src="http://player.vimeo.com/video/22864220" width="500" height="370" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Disappointment of the module aside I was happy enough with outcome of my coursework, I created the models (but not the textures) in <a href="http://www.blender.org/" title="Blender">Blender</a>, and used <a href="http://chumbalum.swissquake.ch/" title="Milkshape">Milkshape</a> to import them (the only model loader I had at the time was a Milkshape one). Milkshape kept flipping the normals on me for some reason, the solution was rather mental, I turned them inside out in Blender and Milkshape flipped them back around.</p>
]]></content>
  </entry>
  
</feed>
