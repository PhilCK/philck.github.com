<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CooperKing.net</title>
    <description>My general musings</description>
    <link>http://www.cooperking.net/</link>
    <atom:link href="http://www.cooperking.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Prototypes</title>
        <description>&lt;p&gt;I found some old game prototypes I worked on, which were really projects I created while developing a hobby game engine.&lt;/p&gt;

&lt;h2 id=&quot;reaper-squadron&quot;&gt;Reaper Squadron&lt;/h2&gt;

&lt;p&gt;I had high hopes for this one, I wanted a game where I could fly Spitfires in space (Like in that Dr Who episode). It was really hard getting the plane to feel right while flying, eventually I found a balance and it started feeling right, but I abandoned it for reasons I can’t remember now.&lt;/p&gt;

&lt;div class=&quot;embedVideo&quot;&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/135801302&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;vortex&quot;&gt;Vortex&lt;/h2&gt;

&lt;p&gt;I’ve made a few Tempest style games, one for the &lt;a href=&quot;https://vimeo.com/37030697&quot;&gt;PS2&lt;/a&gt; in university. I quite enjoyed this one demo, but really tempest 2000 is near perfection anyway. The big thing of this game was how good and bad my engine was. It was really fast for me to get something up and running, but engine modifications were proving to be a pain in the arse.&lt;/p&gt;

&lt;h2 id=&quot;framework-hell&quot;&gt;Framework Hell&lt;/h2&gt;

&lt;p&gt;These prototypes were fun, but ultimately made me fall out with a full object orientated style. I had entered framework hell. It was painfully hard to make changes in the core. It also made it abundently clear that scripting languages are such a pain to embed and a joy to use. My next project will certainly build on these lessons. I’ve put up the code on Github &lt;a href=&quot;https://github.com/PhilCK/reaper-squad&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/PhilCK/vortex&quot;&gt;here&lt;/a&gt; for the curious.&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 18:11:04 +0100</pubDate>
        <link>http://www.cooperking.net/gamedev/2015/08/11/prototypes/</link>
        <guid isPermaLink="true">http://www.cooperking.net/gamedev/2015/08/11/prototypes/</guid>
      </item>
    
      <item>
        <title>Mega Textures</title>
        <description>&lt;p&gt;Back in university I did my honours project on &lt;a href=&quot;https://vimeo.com/66203380&quot;&gt;Virtual Textures&lt;/a&gt;. Mega Textures could be considered the predecessor to Virtual Textures. It’s actually a very simple idea, and was surprisingly easy to knock up a simple application.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What Is It&lt;/h2&gt;

&lt;p&gt;In short it is a dynamic mip-map system. With a handful of 512x512 textures you can texture a massively &lt;em&gt;unique&lt;/em&gt; terrain. With a very small memory overhead. If you can imagine drawing rings around the camera that go further and further out. Each one of these rings is a 512x512 texture that stretches further and further away. A notable example in games was Quake Wars, but the idea was around well before John Carmack made it popular.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How Does It Work&lt;/h2&gt;

&lt;p&gt;In this demo I created a big texture and also created all the mip layers up-front, this makes it easier to sample on the fly without having to think about things like filtering as well. HDD space is cheap, memory, CPU and GPU are less cheap.&lt;/p&gt;

&lt;p&gt;So for a given point we build a new mip map layer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cooperking.net/images/mega_tex/mega_tex_mips.png&quot; alt=&quot;Mip Levels&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The different colors in the screen shot indicate a different texture (mip) being sampled around the origin (&lt;em&gt;note: you would usually do this around the camera&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;It is 2D really. Mega Textures fail with overhangs and things like that. Which means it can’t be extended to texturing other objects you may have in the world. However its easy! So for texturing large areas like we do in GIS it might be handy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cooperking.net/images/mega_tex/mega_tex_textured.png&quot; alt=&quot;Textured&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this screenshot the textures are being sampled, which results in seemless transition between the mips.&lt;/p&gt;

&lt;h2 id=&quot;my-solution&quot;&gt;My Solution&lt;/h2&gt;

&lt;p&gt;The code for the demo can be found &lt;a href=&quot;https://github.com/PhilCK/mega-texture&quot;&gt;here&lt;/a&gt;, its very limited and doesn’t rebuild the maps when you move the camera, although that should be trivial enough to add. I’m also using 6 mips as I had in mind mapping of very very large areas, but I was having an issue making a large enough dataset so 6 mips might seem like an overkill for what is being renderered. The dataset isn’t included in the repo as Github doesn’t like files of 1gb. However you can easily open up your favourite image editor and make a massive texture, be sure to udpate the size of the texture in the code.&lt;/p&gt;

&lt;h2 id=&quot;final&quot;&gt;Final&lt;/h2&gt;

&lt;p&gt;Virtual Textures are far superior, and can help abstract alot of your texture management, but for a cheap texturing solution this is still viable. I’d like to take another crack at Virtual Textures time permitting but I might try and do it in a map context rather than a game one.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Aug 2015 23:10:14 +0100</pubDate>
        <link>http://www.cooperking.net/gamedev/2015/08/08/mega-textures/</link>
        <guid isPermaLink="true">http://www.cooperking.net/gamedev/2015/08/08/mega-textures/</guid>
      </item>
    
      <item>
        <title>Working With Maps</title>
        <description>&lt;p&gt;Seven months into my job at Esri UK, I’ve passed my probation and still loving it. While many games companies make a big deal about their ‘culture’, which is usually a subtext to ‘We let you have fun at work, now do unpaid overtime’. Esri UK by contrast has an awesome culture. I do miss the tech aspect of games, but in reality I would have had to leave Scotland to do that kind of work.&lt;/p&gt;

&lt;p&gt;Working with maps has been fun. I’m surrounded by smart people and difficult problems. Heaven!&lt;/p&gt;

&lt;h2 id=&quot;scale&quot;&gt;Scale&lt;/h2&gt;

&lt;p&gt;Representing the world on a map is fairly straightforward to render. The issues come with rendering a map of the world, then zooming in to your street corner. You can’t exactly just scale up the quad and hope to get away with it (I did, it failed). If you scale up your map, you have to scale up your points on the map, which also fails for the same reason. This is where games knowledge comes in handy, some of these are solved issues in games.&lt;/p&gt;

&lt;h2 id=&quot;content&quot;&gt;Content&lt;/h2&gt;

&lt;p&gt;After you’ve got your map sorted there is content. Some of the datasets are huge! And they want them to work. Millions of points or polygons spread across this massively scalable world, Nice!&lt;/p&gt;

&lt;h2 id=&quot;platform&quot;&gt;Platform&lt;/h2&gt;

&lt;p&gt;While the performance of iDevices are impressive, they still aren’t a desktop with 4 gb of ram. Getting all this onto a phone and have it running correctly is a massive issue. Trying to have dynamic maps that don’t kill your battery and run a decent frame-rate with these big datasets - ouch. Games can be isolated fairly well, give me a GL context and I’ll do the rest. We need a bit more in maps, which means more external libraries, more platform dependencies, more platform issues.&lt;/p&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;/h2&gt;

&lt;p&gt;This area is filled with problems, smart people and no easy solutions. Loving it!&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Aug 2015 23:10:14 +0100</pubDate>
        <link>http://www.cooperking.net/mapdev/2015/08/06/working-with-maps/</link>
        <guid isPermaLink="true">http://www.cooperking.net/mapdev/2015/08/06/working-with-maps/</guid>
      </item>
    
      <item>
        <title>Caffeine Math</title>
        <description>&lt;p&gt;A little while ago I started putting up some of my math code onto Github which can be found &lt;a href=&quot;https://github.com/PhilCK/caffeine-math&quot;&gt;here&lt;/a&gt;. Its a small simple math library that I use for my hobby projects (mostly games).&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What Is It?&lt;/h2&gt;

&lt;p&gt;It’s a header only math library, that handles most vector, and matrix math. It has other things in it as well. I’ve been porting it over in small bits as I write tests for those components. Also gives me a chance to add missing functions that should be in a math library but I’ve not had a need for.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How To Use It?&lt;/h2&gt;

&lt;p&gt;It’s completely function based. And all functions start with the type name to make things like intellisence easier.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_velocity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector3_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector3_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of it works along those lines.&lt;/p&gt;

&lt;h2 id=&quot;no-simd&quot;&gt;No SIMD&lt;/h2&gt;

&lt;p&gt;It’s always been one of those things I’ve meant to add, but usually I find speed up’s elsewhere so I use them. Combined with my projects being small scale. However its something I’d like to add after I’ve finished porting/testing the various components.&lt;/p&gt;

&lt;h2 id=&quot;what-next&quot;&gt;What Next&lt;/h2&gt;

&lt;p&gt;I need to finish Matrix support and I have some other basic geometry math I need to add for a project, I’ll add that to the library when I come to that. And hopefully I can get SIMD done stuff at the end of summer.&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Jun 2015 23:01:18 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/06/20/caffeine-math/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/06/20/caffeine-math/</guid>
      </item>
    
      <item>
        <title>C++ Build Gem</title>
        <description>&lt;p&gt;My first gem! I’m sure this must be a special moment if I was sentimental enough to care about that kinda thing :) This is a gem to help build C++ files.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;I started this little gem to bridge the gap between using full blown IDE’s and compiling on the command line. I sometimes find that making a project is too verbose for compiling a bunch of files, while the command line quickly becomes tedious.&lt;/p&gt;

&lt;p&gt;Why not just use Rake? Well I wanted something a little more geared towards C++, and while I use Rake for a lot of things both in and out of work, I would still end up having to write and cut and paste code to build the command line string.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-it&quot;&gt;How To Use It&lt;/h2&gt;

&lt;p&gt;It’s very similar to Rake so it shouldn’t feel out of place.&lt;/p&gt;

&lt;p&gt;The usual&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install cpp_builder&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a file called &lt;code&gt;buildfile&lt;/code&gt; in the directory you wish to run it from. Then edit the file to be something like this…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;CppBuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test_basic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:clang&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc_dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/local/include&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib_dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/local/lib&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SDL&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;main.cpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo.cpp&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:debug&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then call from the command line.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cpp_build test_basic&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it will compile your program.&lt;/p&gt;

&lt;h2 id=&quot;support-and-future-dev&quot;&gt;Support and Future Dev&lt;/h2&gt;

&lt;p&gt;Currently it only supports OSX and Clang. I hope to get other support in quite soon, in particular support for other compilers. While I still have a need for this I’ll keep improving it. When I’m happy with Clang support I’ll move to GCC. Windows is a little finicky because its command line interface isn’t available by default usually, but I’d like to get that support there to.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 18:50:18 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/06/16/cpp_build/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/06/16/cpp_build/</guid>
      </item>
    
      <item>
        <title>Book Recommendations</title>
        <description>&lt;p&gt;List of books that I’ve read and recommend. In no particular order…&lt;/p&gt;

&lt;h2 id=&quot;scott-meyers&quot;&gt;Scott Meyers&lt;/h2&gt;

&lt;p&gt;These books should be mandatory for C++ developers everywhere! They are good to get up to speed with good C++ practices. Read em!&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;

	&lt;div style=&quot;width:30%; display: inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Effective-Modern-Specific-Ways-Improve/dp/1491903996/&quot;&gt;
		&lt;img src=&quot;http://2.bp.blogspot.com/-eOUamjgchSI/U6cJGkNW-vI/AAAAAAAAAOY/zOgPNpFvqH8/s1600/front%2Bcover.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

	&lt;div style=&quot;width:30%; display:inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Effective-Specific-Programs-Professional-Computing/dp/0321334876/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/71lC2NLUvuL.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

	&lt;div style=&quot;width:30%; display:inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Effective-STL-Specific-Professional-Computing/dp/0201749629&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/416gOk71-DL.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&quot;the-lean-startup-getting-real-and-rework&quot;&gt;The Lean Startup, Getting Real, and Rework&lt;/h2&gt;

&lt;p&gt;These books aren’t directly about software development, but there is a very good common theme that runs right through it. Less is more! Even if you aren’t starting a company as much of the mentality in these books are relatable, I would recommend reading them if you are a software developer.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;

	&lt;div style=&quot;width:30%; display: inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Lean-Startup-Innovation-Successful-Businesses/dp/0670921602/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/71Ed2BslK0L.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

	&lt;div style=&quot;width:30%; display:inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Getting-Real-smarter-successful-application/dp/0578012812/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/31jvYr2h6GL.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

	&lt;div style=&quot;width:30%; display:inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/ReWork-Change-Way-Work-Forever/dp/0091929784/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/61GFc%2Bk-5PL.jpg&quot; /&gt;
		&lt;/a&gt;
	&lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&quot;bonus-no-asshole-rule-and-remote&quot;&gt;Bonus: No Asshole Rule and Remote&lt;/h2&gt;

&lt;p&gt;Not software books but are good reads.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;

	&lt;div style=&quot;width:30%; display: inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Asshole-Rule-Civilised-Workplace-Surviving/dp/0749954035/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/61XPJCzklvL.jpg&quot; /&gt;
	&lt;/a&gt;
	&lt;/div&gt;

	&lt;div style=&quot;width:30%; display: inline-block;&quot;&gt;
		&lt;a href=&quot;http://www.amazon.co.uk/Remote-Required-David-Heinemeier-Hansson-ebook/dp/B00CZ7OC46/&quot;&gt;
		&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41iNTaTZrbL.jpg&quot; /&gt;
	&lt;/a&gt;
	&lt;/div&gt;	

&lt;/div&gt;
</description>
        <pubDate>Mon, 25 May 2015 22:25:18 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/05/25/software-book-recommendations/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/05/25/software-book-recommendations/</guid>
      </item>
    
      <item>
        <title>Who Do You Code For?</title>
        <description>&lt;p&gt;&lt;em&gt;“Who are you coding for?”&lt;/em&gt; Seems like an easy enough statement. Though if you’ve answered ‘your boss’ or ‘your company’ or ‘the product’ you’ve likely missed your target audience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://blog.codinghorror.com/coding-for-violent-psychopaths/&quot;&gt;Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The majority of code is maintenance, so its seems that coders spend the majority of the time reading code and not writing it. So like an author of a book you are writing for your audience and that’s the other coders you work with. So when somebody extends your function to encorporate some new feature and a bug is caused, then you share the blame for that, as much as your share the credit for the inital code. You could be laying down the foundation for dozens of modifications, so do it right. I’m not talking Space Shuttle bullet proof, just make it safe, clear, and extendable without a PhD into your mind.&lt;/p&gt;

&lt;p&gt;These are little day to day things I like to do, to try and help the next guy along when he has to modify what I’ve left behind.&lt;/p&gt;

&lt;h2 id=&quot;local-scope&quot;&gt;Local scope&lt;/h2&gt;

&lt;p&gt;Often I come accross big methods that do several different things. It can be quite hard to get your head around these methods. Local scoping responibilites can help refacting later down the line, but really helps with understanding of whats going on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;your_uber_long_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Safe bet this is used in multiple scopes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lucky_number_punk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1666f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// A comment above a set of curlies helps define a chunk.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Anybody reading knows this ani&amp;#39;t going to interact with anything outside.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.234f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Cool code goes here.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_variable_above_curlies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Indicates logic beloew sets it.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// looks like an inline function, makes it easy to pull out.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// .. more cool stuff&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Scoping goes one way and one way only. As soon as you graduate a variable’s scope you can be pretty sure that nobody is ever going to reduce it. From local to file, file to global. Scope down hard. In some circumstances I’ll even push arrays inside the loop i’m iterating in, I certainly will for constants.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.234f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The shared_ptr people will bring this up in review also, “Did you know you can move that array and constant outside?”. Yes yes I did.&lt;/p&gt;

&lt;h2 id=&quot;avoid-sharedptr&quot;&gt;Avoid shared_ptr&lt;/h2&gt;

&lt;p&gt;This is pretty much the same as local scope but I seperated because people don’t seem to consider shared_ptrs todo with scope. Really tho, shared_ptrs, globals and singletons all have similar issues. There state can get modified by who knows what, who knows where. Its a good chance you are doing multithreaded, or task based multithreading. You’ll waste hours trying to understand state changes when ‘everything’ is a shared_ptr, global, or a singleton.&lt;/p&gt;

&lt;p&gt;I find most situations with shared_ptr’s can be avoided, but quite often the lazy approch is taken. Or the its just like GC mentality sets in. Its not GC, you likely don’t want GC and its not solving your design issues. You can’t always avoid it, especially when working on a system thats been in dev for a while, but don’t add to that crap unless you have to.&lt;/p&gt;

&lt;h2 id=&quot;hate-chaining-objects&quot;&gt;Hate Chaining Objects&lt;/h2&gt;

&lt;p&gt;Object orientation can lead to alot of repeated &lt;code&gt;this_object.some_method().other_method().that_method()&lt;/code&gt; type thing. this makes code a bit messy. If you are doing it repeatedly please make it into references to help the next guy who comes along. He’ll be able to read it better.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;this_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;another_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cool_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;vs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;another_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;another_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cool_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much better! It looks nicer, and makes it clear what is being used accross a large file.&lt;/p&gt;

&lt;h2 id=&quot;dry-up-do-not-repeate-yourself---do-not-&quot;&gt;DRY Up ‘Do Not Repeate Yourself - Do Not …’&lt;/h2&gt;

&lt;p&gt;When ever I see repeated code I have an inbuilt urge to refactor it. Less code paths usually mean easier debuging, and extending. I once opened up a file on a project and saw 12 hefety functions that where all just cut and pasted duplicates with a minor variable changed. Lazy and bug prone - urgh!&lt;/p&gt;

&lt;p&gt;When ever I see repeated code I have an inbuilt urge to refactor it. Less code paths usually mean easier debuging, and extending. I once opened up a file on a project and saw 12 hefety functions that where all just cut and pasted duplicates with a minor variable changed. Lazy and bug prone - urgh!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;see how annoying that is!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;const-as-much-as-possible&quot;&gt;Const As Much As Possible&lt;/h2&gt;

&lt;p&gt;Really in big methods and objects consting is godsend to the reader. Its very easy to iscolate the moving parts of a program, and thus be able to generate quickly some understanding of how things work.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wicked_calculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// You can already tell that baz - its likely going to change.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// lots of lines&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_a_sony_random_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;use-safe-things&quot;&gt;Use Safe Things.&lt;/h2&gt;

&lt;p&gt;Sloppy code breeds sloppy code I always say (I don’t). Consider this.&lt;/p&gt;

&lt;p&gt;Your simple little loop&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// few lines of logic.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;suddenly gets modified by somebody else, and somebody else, and somebody else beyond that…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// lots of more logic.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// container now indexed by other_container&amp;#39;s size()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the modifications of other_container get to the point where they are different size’s you are suddenly writting on sombody else’s memory. If you are luckly you’ll cause a crash, unluckly you could be tweaking somebody else’s variable causeing some other error down the line. This can be a nightmare situation to debug (one I’ve had to debug before). Although if the original author had used .at(i). as soon as the containers changed size this would have failed. std:: has lot of these type of things. use them where possible. Save somebody else some stress.&lt;/p&gt;

&lt;h2 id=&quot;dont-go-mental-with-abstraction&quot;&gt;Don’t Go Mental With Abstraction&lt;/h2&gt;

&lt;p&gt;Coders have an obession with abstraction, an unhealthy one. Its far more helpfuly to me if I know a type is a float, or shared_ptr straight up. If they are all hidden beneath layers and layers of typedefs and abstractions it can be a royal pain. Keep things flat where you can, and stop saying “Another layer of abstraction solves everything.” If you’re abstracting for the sake of future proofing you are likely making more work for youself, and the next guy trying to understand what you left behind, so he can modifiy it.&lt;/p&gt;

&lt;h2 id=&quot;alias-namespace-locally&quot;&gt;Alias Namespace Locally&lt;/h2&gt;

&lt;p&gt;Recently I moved job, and I’ve been spending alot of time trying to get to know as much of the codebase as possible, and the various &lt;code&gt;using namespace x&lt;/code&gt; type thing makes it harder, because as I read the code I have litterally no idea where this stuff is comming from. What makes it worse is we have several definitions of a type &lt;code&gt;point&lt;/code&gt; which as the new guy it makes it hard. Although I do understand why - our namespace aren’t a simple &lt;code&gt;std::&lt;/code&gt;, they are massive and typing them out is a nightmare and makes code look ugly. Though dumping the namespace isn’t the answer. Alias it, preferably in the function (scope down hard) otherwise file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;your_amazing_cool_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;short_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your_really&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;short_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;assert-lots&quot;&gt;Assert Lots&lt;/h2&gt;

&lt;p&gt;Assert implies alot of things for you. Whats better a comment that says “This can’t be null” or &lt;code&gt;assert(your_ptr)&lt;/code&gt; If passing null, or 3, or “hi bob” is invalid make it explicitly invalid.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;radical_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_boo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_boo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... continue&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assert’s enforce your assumptions on the code your wrote, it also forces these assumptions on the guy who’s extending your code. Comments do not.&lt;/p&gt;

&lt;h2 id=&quot;further-things&quot;&gt;Further Things&lt;/h2&gt;

&lt;p&gt;Often lazy coding comes with a ‘time is money’ or ‘my time is better spent elsewhere’ rebuttle. Both these are as short sighted as I am on a Friday evening. If you are generating situations where bugs are easily generated then somebody is spending hours/days tracking them down. Which is likely going to cost more to fix (not to mention demoralization of people working on it).&lt;/p&gt;

&lt;p&gt;Please please please read Scot Myers books if you can, they are really good. Also this talk from Jonathon Blow has some good bit in it also.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 May 2015 16:41:12 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/05/19/who-are-you-coding-for/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/05/19/who-are-you-coding-for/</guid>
      </item>
    
      <item>
        <title>My Top 10 Code Review BS</title>
        <description>&lt;p&gt;I think code reviews are a good thing, but when a friend posted &lt;a href=&quot;http://kevinlondon.com/2015/05/05/code-review-best-practices.html&quot;&gt;this article&lt;/a&gt; it made me realise that they can sometimes suck. And for the wrong reasons. These are some comments that I’ve seen in reviews, they range from the nit-picky to the insane.&lt;/p&gt;

&lt;p&gt;So on my road to becoming more a jaded developer, these are my top ten code review bullshit comments…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure: I admit it - I’m guilty of one or two of these (not admitting to which tho).&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;you-dont-need-to-initalize-that&quot;&gt;09. You Don’t Need To Initalize That.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“You know shared_ptr default to null anyway so you don’t need to bother initalizing it.”&lt;/em&gt; Yes, yes I did know that. However since you’ve typedef’d everything to hide the fact its a shared_ptr I’ll just go and make it super obvious to anybody reading code.&lt;/p&gt;

&lt;h3 id=&quot;standard-bashing&quot;&gt;08. Standard Bashing&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“I know in some cases we use the ‘qw’ prefix, but in this case it should be ‘ddw’, it clearly states it in 3.2.23.42.34a in the 4th version of the standard doc.”&lt;/em&gt; You know what the problem might actually be?&lt;/p&gt;

&lt;h3 id=&quot;non-standard-bashing&quot;&gt;07. Non Standard Bashing&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“Its not in the standard doc but it’s what I do.”&lt;/em&gt; In other words I should code against your preference because you are doing the review!&lt;/p&gt;

&lt;h3 id=&quot;you-dont-need-to-use-ati&quot;&gt;06. You Don’t Need To Use .at(i)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“Since you are looping over the size of the container .at(i) isn’t required! It’s also slower!”&lt;/em&gt; Oh how shortsighted you are. Yes it isn’t ‘required’ today, but functions you know have this habit of being modified beyond their original purpose. So I’ll just leave that in.&lt;/p&gt;

&lt;h3 id=&quot;dont-use-init-lists&quot;&gt;05. Don’t Use Init Lists.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“Don’t use init lists because they are unreadable.”&lt;/em&gt; Are we speaking the same language? Do you do a da chacha?&lt;/p&gt;

&lt;h3 id=&quot;make-it-a-sharedptr&quot;&gt;04. Make It A shared_ptr&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“Make it a shared_ptr, it will solve the ownership.”&lt;/em&gt; NO IT WILL NOT SOLVE THE OWNERSHIP - IT WILL MAKE IT MORE COMPLICATED!&lt;/p&gt;

&lt;h3 id=&quot;you-dont-need-to-const-everything&quot;&gt;03. You Don’t Need To const Everything.&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“A const isn’t a guarantee that the value wont change.”&lt;/em&gt; I never knew that was possible in C++ - you can change the value of a const variable! NO - WAY! Or perhaps I const’d it for the readers benefit (of which I am now regretting).&lt;/p&gt;

&lt;h3 id=&quot;you-shouldnt-memcpy-becuase-of-vector-of-bools&quot;&gt;02. You Shouldn’t memcpy Becuase Of Vector Of Bools.&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“What if the vector changes to a vector of bools, its a specialization you know, then your memcpy is dangerous.”&lt;/em&gt; I’m now stressing that I hadn’t considered that my 3D floating point positional data could be represented with bools (yes yes binary blah blah).&lt;/p&gt;

&lt;h3 id=&quot;dont-use-c11-because-we-dont-know-it&quot;&gt;01. Don’t Use C++11 Because We Don’t Know It.&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“You shouldn’t use C++11 because not everybody knows it.”&lt;/em&gt; Yep you’re in the right industry!&lt;/p&gt;

&lt;h3 id=&quot;assert-is-too-brutal&quot;&gt;00. assert() Is Too Brutal&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“assert() is detrimental to the user if it gets triggered you know.”&lt;/em&gt; o_O you went to uni right? With a real building and teachers and exams and stuff?&lt;/p&gt;

&lt;h3 id=&quot;final&quot;&gt;Final&lt;/h3&gt;

&lt;p&gt;I look at these in jest, and some of them are valid to a point given the right context. However far too often I’ve seen 40 comments on the correct prefix useage and zero on the overall structure and safety of the program. Reviews serve a point, which is not pointing out the blatantly obvious, or getting out your big nerd hammer, and if you didn’t know assert was a debug tool there are more serious issues.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 May 2015 16:41:12 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/05/16/code-review-hates/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/05/16/code-review-hates/</guid>
      </item>
    
      <item>
        <title>Terminal Dev Log 0x1</title>
        <description>&lt;p&gt;This year I started to make an earnest attempt at making Terminal, a text based hacking game. While recently digging around on an old computer I found some sketches I did back in 2007. I think the initial inspiration came from the early joy of playing &lt;a href=&quot;http://en.wikipedia.org/wiki/MUD&quot;&gt;MUD&lt;/a&gt; games on &lt;a href=&quot;http://en.wikipedia.org/wiki/Bulletin_board_system&quot;&gt;BBS’s&lt;/a&gt; as a kid, combined with playing &lt;a href=&quot;http://en.wikipedia.org/wiki/Uplink_%28video_game%29&quot;&gt;Introversions Uplink&lt;/a&gt;. I remember thinking wouldn’t it be cool to make an MMO hacking game (I don’t think that anymore).&lt;/p&gt;

&lt;h2 id=&quot;the-game&quot;&gt;The Game&lt;/h2&gt;

&lt;p&gt;Terminal is going to be predominantly a text based game, but I want to use 3D scenes to help generate an atmosphere and immersion. The game is going to revolve around a hacker doing what it is that hackers do. This is quite a niche game, but I like that. I don’t have time or resources to take on a huge game.&lt;/p&gt;

&lt;div class=&quot;embedVideo&quot;&gt;
    &lt;figure&gt;
    	&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/yPLYtQxJM1o&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;why-not-unity&quot;&gt;Why Not Unity&lt;/h2&gt;

&lt;p&gt;To be clear I like Unity as a tool, I’ve used it many times.  I have no issue with it (except that maybe you become vendor locked). That said I don’t enjoy using it. It doesn’t scratch my itch at all - Game development is complex and I love that, taking that away makes me less happy. Also from experience, I think it makes people less creative. I’ve seen projects suffer from feature creep because Unity provides everything along with the illusion that it is magically easy. Features end up being used simply because they are there, which makes for a series of half baked ideas rather than a few ideas amazingly executed. So by starting with nothing (more or less) every feature/technology needs to be justified. Its far easier to be creative and find what matters with hard constraints.&lt;/p&gt;

&lt;h2 id=&quot;caffeine-engine&quot;&gt;Caffeine Engine&lt;/h2&gt;

&lt;p&gt;I’m not starting from scratch however, SDL provides a solid cross platform window, GL context and input across many platforms (including the web). This pretty much covers the hardest part of cross platform development. I’ve been working on the underlying renderer for years on and off, its just one of those bits of code most game developers have lying around. I’m also using Lua to write the game code. Terminal is mostly text based so for the most part I’m just exposing the ability to render text to the screen. Why is it called Caffeine, I honestly can’t remember - I’ve been using it as a namespace in code since university as a way to identify whats game code and whats not, and calling it an engine is a little bit of a stretch :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cooperking.net/images/SubwayTestLevel.gif&quot; alt=&quot;Subway&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;Whats Next&lt;/h2&gt;

&lt;p&gt;I spend a lot of time commuting so I’ve been trying to write game code in that time, and do the technology side of things on the weekends. I’m currently working on how the laptop works right now, animation support is next on my technology list of things to do. Further blog posts I’ll talk more directly about how the game is progressing.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 11:11:06 +0100</pubDate>
        <link>http://www.cooperking.net/gamedev/2015/04/18/terminal/</link>
        <guid isPermaLink="true">http://www.cooperking.net/gamedev/2015/04/18/terminal/</guid>
      </item>
    
      <item>
        <title>Hair Pulling MSVS Brace Initialization</title>
        <description>&lt;p&gt;We’ve all had one of those moments where you can’t figure out what the hell is going on. You’ve changed something in your code and all hell has broken loose, most of the time this is to due to needing a rest or at least a change of gear. When porting some code that I had been working on with Clang over to MSVS it altogether stopped working. After a few expletives I was quite surprised to find out it that was due to double brace initialization combined with only a &lt;code&gt;single&lt;/code&gt; element.&lt;/p&gt;

&lt;h3 id=&quot;testcode&quot;&gt;TestCode&lt;/h3&gt;

&lt;p&gt;Curious to what was going on I did the following little &lt;a href=&quot;http://pastie.org/10048059&quot;&gt;test&lt;/a&gt; in MSVS 2013 (Update 4).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fooOne&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fooTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fooTwo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;barOne&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;barTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;barTwo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;boo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;boo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Top points if this is the output that you are expecting.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fooOne

b

boo
boo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Changing the initialization to single braces fixes the issue, I’m not sure where I picked up the double braced initialization from but I’ve always used them that way.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 09:05:06 +0100</pubDate>
        <link>http://www.cooperking.net/general/2015/04/06/brace-initialization/</link>
        <guid isPermaLink="true">http://www.cooperking.net/general/2015/04/06/brace-initialization/</guid>
      </item>
    
  </channel>
</rss>
